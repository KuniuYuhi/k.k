#pragma once



/// <summary>
/// プレイヤーのステータス
/// </summary>
class Status_Player
{
private:

	/// <summary>
	/// キャラクターの基本的なステータス
	/// </summary>
	struct PlayerStatus
	{
		int maxHp = 0;					//HPの最大値
		int currentHp = 0;				//現在のHP
		int defaultPower = 0;				//基礎攻撃力
		int currentPower = 0;				//現在の攻撃力
		float maxStamina = 0;			//スタミナの最大値
		float currentStamina = 0;		//現在のスタミナ
		float defaultSpeed = 0.0f;		//基礎スピード
		float dashSpeed = 0.0f;			//加速時のスピード
		float evasionSpeed = 0.0f;		//回避時のスピード
	};

	/// <summary>
	/// 武器のステータス
	/// </summary>
	struct WeaponStatus
	{
		int defaultAtk = 0;				//基礎攻撃力
		int currentAtk = 0;				//現在の攻撃力
		int skillAtk = 0;				//スキルの攻撃力
		int maxEndurance = 0;			//耐久値の最大値
		int currentEndurance = 0;				//耐久値。耐久値の概念が必要ないなら-1に設定する

		float comboKnockBackPower[3] = { 150.0f };	//通常攻撃のコンボでのノックバックパワー

		float skillKnockBackPower = 200.0f;

		//靭性ゲージのことも考える

		//タイプ　斬　射　打
	};


	PlayerStatus m_playerStatus;
	WeaponStatus m_weaponStatus;

public:

	/// <summary>
	/// キャラクターのステータス構造体を取得
	/// </summary>
	/// <returns></returns>
	const PlayerStatus& GetCharacterStatus()
	{
		return m_playerStatus;
	}
	/// <summary>
	/// 武器のステータス構造体を取得
	/// </summary>
	/// <returns></returns>
	const WeaponStatus& GetWeaponStatus()
	{
		return m_weaponStatus;
	}

	/// <summary>
	/// プレイヤーのステータスを初期化
	/// </summary>
	/// <param name="name">ステータスを初期化したいキャラの名前</param>
	void InitPlayerStatus(const std::string& name);
	/// <summary>
	/// 武器のステータスの初期化。
	/// </summary>
	/// <param name="weaponName">ステータスを初期化したい武器の名前</param>
	void InitWeaponStatus(const std::string& weaponName);



	//////////////////////////////////////////////////////////////////////////////////////////////
	///プレイヤーのステータスに関する関数
	////////////////////////////////////////////////////////////////////////////////////////////// 
	
	/// <summary>
	/// HPの設定
	/// </summary>
	/// <param name="setHp"></param>
	void SetCurrentHp(const int setHp)
	{
		m_playerStatus.currentHp = setHp;
	}
	/// <summary>
	/// HPの取得
	/// </summary>
	/// <returns></returns>
	const int& GetHp() const
	{
		return m_playerStatus.currentHp;
	}
	/// <summary>
	/// 最大HPの取得
	/// </summary>
	/// <returns></returns>
	const int& GetMaxHp() const
	{
		return m_playerStatus.maxHp;
	}

	/// <summary>
	/// プレイヤーの現在の攻撃力の設定
	/// </summary>
	/// <param name="setAtk"></param>
	void SetAtk(const int setAtk)
	{
		m_playerStatus.currentPower = setAtk;
	}
	/// <summary>
	///  プレイヤーの現在の攻撃力の取得
	/// </summary>
	/// <returns></returns>
	const int& GetAtk() const
	{
		return m_playerStatus.currentPower;
	}
	/// <summary>
	/// プレイヤーの現在の攻撃力を増やす
	/// </summary>
	/// <param name="addPower">加算する攻撃力</param>
	void AddPowerToCurrentPower(int addPower)
	{
		m_playerStatus.currentPower += addPower;
	}

	/// <summary>
	/// 現在のスタミナを取得
	/// </summary>
	/// <returns></returns>
	const float& GetCurrentStamina() const
	{
		return m_playerStatus.currentStamina;
	}
	

	/// <summary>
	/// 基礎スピードの取得
	/// </summary>
	/// <returns></returns>
	const float& GetDefaultSpeed() const
	{
		return m_playerStatus.defaultSpeed;
	}
	/// <summary>
	/// ダッシュスピードの取得
	/// </summary>
	/// <returns></returns>
	const float& GetDashSpeed() const
	{
		return m_playerStatus.dashSpeed;
	}


	///////////////////////////////////////////////////////////////////////////////////////////////
	///武器のステータスに関する関数
	///////////////////////////////////////////////////////////////////////////////////////////////




	///////////////////////////////////////////////////////////////////////////////////////////////
	///
	///////////////////////////////////////////////////////////////////////////////////////////////


		//csvは使わない
	std::string name;          //名前

	//CSVの情報を保存したマップ
	static std::unordered_map<std::string, Status_Player> StatusDataMAP;
	//プレイヤーのステータスの初期化で使う静的な型
	static const std::string playerStatusCsvFilePath;
	static bool IsLoadedPlayerStatusCSVFile;
	//武器のステータスの初期化で使う静的な型
	static const std::string weaponStatusCsvFilePath;
	static bool IsLoadedWeaponStatusCSVFile;


	private:

	/// <summary>
	/// プレイヤーステータスcsvファイルの読み込み
	/// </summary>
	/// <param name="name">読み込みたいプレイヤーの名前</param>
	void LoadPlayerStatusCSV(const std::string& name);

	/// <summary>
	/// 武器cステータスsvファイルの読み込み
	/// </summary>
	/// <param name="name">読み込みたい武器の名前</param>
	void LoadWeaponStatusCSV(const std::string& name);



};

